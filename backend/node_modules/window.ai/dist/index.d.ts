type ChatMessage = {
    role: "system" | "user" | "assistant";
    content: string;
};
type ChatRole = ChatMessage["role"];
type PromptInput = {
    prompt: string;
};
type MessagesInput = {
    messages: ChatMessage[];
};
type Input = PromptInput | MessagesInput;
declare function isMessagesInput(input: Input): input is MessagesInput;
type TextOutput = {
    text: string;
};
type MessageOutput = {
    message: ChatMessage;
};
type Output = TextOutput | MessageOutput;
declare function isTextOutput(output: Output): output is TextOutput;
declare function isMessageOutput(output: Output): output is MessageOutput;
interface CompletionOptions<TModel> {
    onStreamResult?: (result: Output | null, error: string | null) => unknown;
    temperature?: number;
    numOutputs?: number;
    maxTokens?: number;
    stopSequences?: string[];
    model?: TModel;
}
declare enum ErrorCode {
    NotAuthenticated = "NOT_AUTHENTICATED",
    PermissionDenied = "PERMISSION_DENIED",
    RequestNotFound = "REQUEST_NOT_FOUND",
    InvalidRequest = "INVALID_REQUEST",
    ModelRejectedRequest = "MODEL_REJECTED_REQUEST"
}
declare enum EventType {
    ModelChanged = "model_changed",
    Error = "error"
}
type RequestID = string;
type EventListenerHandler<T> = (event: EventType, data: T | ErrorCode) => void;
declare const VALID_DOMAIN: "https://windowai.io";
interface WindowAI<TModel = string> {
    __window_ai_metadata__: {
        domain: typeof VALID_DOMAIN;
        version: string;
    };
    getCompletion(input: Input, options?: CompletionOptions<TModel>): Promise<Output | Output[]>;
    getCurrentModel(): Promise<TModel>;
    addEventListener<T>(handler: EventListenerHandler<T>): RequestID;
}
declare global {
    interface Window {
        ai: WindowAI;
    }
}
declare function hasWindowAI(): boolean;
declare function waitForWindowAI(opts?: {
    interval: number;
    timeout: number;
}): Promise<void>;
declare const getWindowAI: (opts?: {
    interval: number;
    timeout: number;
}) => Promise<WindowAI<string>>;

export { ChatMessage, ChatRole, CompletionOptions, ErrorCode, EventListenerHandler, EventType, Input, MessageOutput, MessagesInput, Output, PromptInput, RequestID, TextOutput, VALID_DOMAIN, WindowAI, getWindowAI, hasWindowAI, isMessageOutput, isMessagesInput, isTextOutput, waitForWindowAI };
